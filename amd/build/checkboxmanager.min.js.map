{"version":3,"sources":["../src/checkboxmanager.js"],"names":["sectionBoxes","addCheckboxes","sections","moduleNames","forEach","section","number","moduleIds","modules","split","length","moduleNamesFiltered","filter","modinfo","includes","modid","toString","addCheckboxToModule","name","sectionNumber","moduleId","moduleName","boxId","cssIds","BOX_ID_PREFIX","moduleElement","document","getElementById","usedMoodleCssClasses","MODULE_ID_PREFIX","checkBoxElement","createElement","type","className","CHECKBOX_CLASS","id","checkboxDescription","ariaLabel","insertBefore","firstChild","push","filterVisibleSections","every","moduleid","updateSelectionAndMoveToDropdowns","sectionsUnfiltered","sectionNamesInSelect","Array","prototype","map","call","SECTION_SELECT","options","option","text","shift","sectionsHaveChanged","JSON","stringify","Templates","renderForPromise","then","html","js","replaceNode","disableInvisibleAndEmptySections","addEventListener","event","target","value","catch","ex","MOVETO_SELECT","DUPLICATETO_SELECT","constants","SECTION_SELECT_DESCRIPTION_VALUE","some","parseInt","disabled","checkboxmanager"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Checkbox manager amd module: Adds checkboxes to the activities for selecting and\r\n * generates a data structure of the activities and checkboxes.\r\n *\r\n * @module     block_massaction/checkboxmanager\r\n * @copyright  2022 ISB Bayern\r\n * @author     Philipp Memmel\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Templates from 'core/templates';\r\nimport {exception as displayException} from 'core/notification';\r\nimport {setSectionSelection} from './massactionblock';\r\nimport {cssIds, constants, usedMoodleCssClasses} from './massactionblock';\r\n\r\n/* A registry of checkbox IDs, of the format:\r\n *  'section_number' => [{'moduleId'   : <module-ID>,\r\n *                       'boxId'       : <checkbox_id>}]\r\n */\r\nconst sectionBoxes = {};\r\n\r\n/**\r\n * The checkbox manager takes a given 'sections' data structure object and inserts a checkbox for each of the given\r\n * course modules in this data object into the DOM.\r\n * The checkbox manager returns another data object containing the ids of the added checkboxes.\r\n *\r\n * @param {[]} sections the sections structure injected by the PHP method or the corresponding webservice call.\r\n * @param {[]} moduleNames array of module information objects: {modid: MODID, name: MOD_NAME}\r\n * @returns {{}} sectionBoxes a data structure containing the ids of the added checkboxes for the course modules.\r\n */\r\nconst checkboxmanager = (sections, moduleNames) => {\r\n    // Filter available sections and modules.\r\n    const sectionsUnfiltered = sections;\r\n    sections = filterVisibleSections(sections);\r\n    updateSelectionAndMoveToDropdowns(sections, sectionsUnfiltered);\r\n    addCheckboxes(sections, moduleNames);\r\n    return sectionBoxes;\r\n};\r\n\r\n/**\r\n * Add checkboxes to all sections.\r\n *\r\n * @param {[]} sections the sections data object\r\n * @param {[]} moduleNames array of module information objects: {modid: MODID, name: MOD_NAME}\r\n */\r\nconst addCheckboxes = (sections, moduleNames) => {\r\n    sections.forEach(section => {\r\n        sectionBoxes[section.number] = [];\r\n        const moduleIds = section.modules.split(',');\r\n        if (moduleIds && moduleIds.length > 0 && moduleIds[0] !== '') {\r\n            const moduleNamesFiltered = moduleNames.filter(modinfo => moduleIds.includes(modinfo.modid.toString()));\r\n            moduleNamesFiltered.forEach(modinfo => {\r\n                addCheckboxToModule(section.number, modinfo.modid.toString(), modinfo.name);\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Add a checkbox to a module element\r\n *\r\n * @param {number} sectionNumber number of the section of the current course module\r\n * @param {number} moduleId id of the current course module\r\n * @param {string} moduleName name of the course module specified by moduleId\r\n */\r\nconst addCheckboxToModule = (sectionNumber, moduleId, moduleName) => {\r\n    const boxId = cssIds.BOX_ID_PREFIX + moduleId;\r\n    const moduleElement = document.getElementById(usedMoodleCssClasses.MODULE_ID_PREFIX + moduleId);\r\n\r\n    // Avoid creating duplicate checkboxes (in case sharing the library).\r\n    if (document.getElementById(boxId) === null) {\r\n        // Add the checkbox.\r\n        const checkBoxElement = document.createElement('input');\r\n        checkBoxElement.type = 'checkbox';\r\n        checkBoxElement.className = cssIds.CHECKBOX_CLASS;\r\n        checkBoxElement.id = boxId;\r\n\r\n        if (moduleElement !== null) {\r\n            const checkboxDescription = moduleName + ' Checkbox';\r\n            checkBoxElement.ariaLabel = checkboxDescription;\r\n            checkBoxElement.name = checkboxDescription;\r\n            // Finally add the created checkbox element.\r\n            moduleElement.insertBefore(checkBoxElement, moduleElement.firstChild);\r\n        }\r\n    }\r\n\r\n    // Add the newly created checkbox to our data structure.\r\n    sectionBoxes[sectionNumber].push({\r\n        'moduleId': moduleId,\r\n        'boxId': boxId,\r\n    });\r\n};\r\n\r\n/**\r\n * Filter the sections data object depending on the visibility of the course modules contained in\r\n * the data object. This is neccessary, because some course formats only show specific section(s)\r\n * in editing mode.\r\n *\r\n * @param {[]} sections the sections data object\r\n * @returns {[]} the filtered sections object\r\n */\r\nconst filterVisibleSections = (sections) => {\r\n    // Filter all sections with modules which no checkboxes have been created for.\r\n    // This case should only occur in course formats where some sections are hidden.\r\n    return sections.filter(section => section.modules.split(',')\r\n        .every(moduleid => document.getElementById(usedMoodleCssClasses.MODULE_ID_PREFIX + moduleid) !== null));\r\n};\r\n\r\n/**\r\n * Update the selection, moveto and duplicateto dropdowns of the massaction block according to the\r\n * previously filtered sections.\r\n *\r\n * @param {[]} sections the sections object filtered before by {@link filterVisibleSections}\r\n * @param {[]} sectionsUnfiltered the same data object as 'sections', but still containing all sections\r\n * no matter if containing modules or are visible in the current course format or not\r\n */\r\nconst updateSelectionAndMoveToDropdowns = (sections, sectionsUnfiltered) => {\r\n    // Easy way to check if the name of a section or the order of sections have been changed.\r\n    // If we have a change, we need to rebuild the dropdowns from templates.\r\n    const sectionNamesInSelect =\r\n        Array.prototype.map.call(document.getElementById(cssIds.SECTION_SELECT).options, option => option.text);\r\n    // Remove placeholder (first option item in select), would disturb in the next comparison.\r\n    sectionNamesInSelect.shift();\r\n    const sectionsHaveChanged =\r\n        JSON.stringify(sectionsUnfiltered.map(section => section.name)) !== JSON.stringify(sectionNamesInSelect);\r\n\r\n    if (sectionsHaveChanged) {\r\n        Templates.renderForPromise('block_massaction/section_select', {'sections': sectionsUnfiltered})\r\n            .then(({html, js}) => {\r\n                Templates.replaceNode('#' + cssIds.SECTION_SELECT, html, js);\r\n                disableInvisibleAndEmptySections(sections);\r\n                // Re-register event listener.\r\n                document.getElementById(cssIds.SECTION_SELECT).addEventListener('click',\r\n                    (event) => setSectionSelection(true, event.target.value), false);\r\n                return true;\r\n            })\r\n            .catch(ex => displayException(ex));\r\n\r\n        Templates.renderForPromise('block_massaction/moveto_select', {'sections': sectionsUnfiltered})\r\n            .then(({html, js}) => {\r\n                Templates.replaceNode('#' + cssIds.MOVETO_SELECT, html, js);\r\n                return true;\r\n            })\r\n            .catch(ex => displayException(ex));\r\n\r\n        Templates.renderForPromise('block_massaction/duplicateto_select', {'sections': sectionsUnfiltered})\r\n            .then(({html, js}) => {\r\n                Templates.replaceNode('#' + cssIds.DUPLICATETO_SELECT, html, js);\r\n                return true;\r\n            })\r\n            .catch(ex => displayException(ex));\r\n    } else {\r\n        // Only disable invisible and empty sections without going through the whole rebuilding process first.\r\n        disableInvisibleAndEmptySections(sections);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the disabled/enabled status of sections in the section select dropdown:\r\n * Enabled if section is visible and contains modules.\r\n * Disabled if section is not visible or doesn't contain any modules.\r\n *\r\n * @param {[]} sections the section data structure\r\n */\r\nconst disableInvisibleAndEmptySections = (sections) => {\r\n    Array.prototype.forEach.call(document.getElementById(cssIds.SECTION_SELECT).options, option => {\r\n        // Disable every element which doesn't have a visible section, except the placeholder ('description').\r\n        if (option.value !== constants.SECTION_SELECT_DESCRIPTION_VALUE\r\n                && !sections.some(section => parseInt(option.value) === section.number)) {\r\n            option.disabled = true;\r\n        } else {\r\n            option.disabled = false;\r\n        }\r\n    });\r\n};\r\n\r\nexport default checkboxmanager;\r\n"],"file":"checkboxmanager.min.js"}